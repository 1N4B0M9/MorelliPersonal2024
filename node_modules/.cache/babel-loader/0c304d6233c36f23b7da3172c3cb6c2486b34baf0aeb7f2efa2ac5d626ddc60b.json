{"ast":null,"code":"import React,{useRef,useMemo}from'react';import{useFrame}from'@react-three/fiber';import*as THREE from'three';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Spheres=()=>{const numColumns=200;// Increase columns for a wider grid\nconst numRows=200;// Reduce rows to lessen load\nconst sphereRadius=0.05;// Smaller spheres\nconst meshRef=useRef();// Memoize positions for instanced mesh\nconst positions=useMemo(()=>{const posArray=[];for(let i=0;i<numColumns*numRows;i++){const x=i%numColumns*0.3-numColumns/2*0.3;const y=0;const z=Math.floor(i/numColumns)*0.3-numRows/2*0.3;posArray.push([x,y,z]);}return posArray;},[numColumns,numRows]);// Animation loop\nuseFrame(_ref=>{let{clock}=_ref;const time=clock.getElapsedTime();const waveSpeed=0.2;const waveFrequency=0.05;for(let i=0;i<numColumns*numRows;i++){const id=i;const dummy=new THREE.Object3D();const[x,y,z]=positions[i];// Smooth wave effect with less aggressive movement\nconst waveOffset=z*waveFrequency;const waveHeight=Math.sin(time*waveSpeed+waveOffset)*0.2;dummy.position.set(x,waveHeight,z);dummy.updateMatrix();meshRef.current.setMatrixAt(id,dummy.matrix);}meshRef.current.instanceMatrix.needsUpdate=true;});return/*#__PURE__*/_jsxs(\"instancedMesh\",{ref:meshRef,args:[null,null,numColumns*numRows],children:[/*#__PURE__*/_jsx(\"sphereGeometry\",{args:[sphereRadius,8,8]}),/*#__PURE__*/_jsx(\"meshStandardMaterial\",{color:\"#00bfff\"})]});};export default Spheres;","map":{"version":3,"names":["React","useRef","useMemo","useFrame","THREE","jsx","_jsx","jsxs","_jsxs","Spheres","numColumns","numRows","sphereRadius","meshRef","positions","posArray","i","x","y","z","Math","floor","push","_ref","clock","time","getElapsedTime","waveSpeed","waveFrequency","id","dummy","Object3D","waveOffset","waveHeight","sin","position","set","updateMatrix","current","setMatrixAt","matrix","instanceMatrix","needsUpdate","ref","args","children","color"],"sources":["/Users/nathanmorelli/Desktop/MorelliPersonal2024 /src/ThreeDeeFiles/Box.js"],"sourcesContent":["import React, { useRef, useMemo } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\n\nconst Spheres = () => {\n  const numColumns = 200; // Increase columns for a wider grid\n  const numRows = 200; // Reduce rows to lessen load\n  const sphereRadius = 0.05; // Smaller spheres\n  const meshRef = useRef();\n\n  // Memoize positions for instanced mesh\n  const positions = useMemo(() => {\n    const posArray = [];\n    for (let i = 0; i < numColumns * numRows; i++) {\n      const x = (i % numColumns) * 0.3 - (numColumns / 2) * 0.3;\n      const y = 0;\n      const z = Math.floor(i / numColumns) * 0.3 - (numRows / 2) * 0.3;\n      posArray.push([x, y, z]);\n    }\n    return posArray;\n  }, [numColumns, numRows]);\n\n  // Animation loop\n  useFrame(({ clock }) => {\n    const time = clock.getElapsedTime();\n    const waveSpeed = 0.2;\n    const waveFrequency = 0.05;\n\n    for (let i = 0; i < numColumns * numRows; i++) {\n      const id = i;\n      const dummy = new THREE.Object3D();\n      const [x, y, z] = positions[i];\n\n      // Smooth wave effect with less aggressive movement\n      const waveOffset = z * waveFrequency;\n      const waveHeight = Math.sin(time * waveSpeed + waveOffset) * 0.2;\n\n      dummy.position.set(x, waveHeight, z);\n      dummy.updateMatrix();\n      meshRef.current.setMatrixAt(id, dummy.matrix);\n    }\n    meshRef.current.instanceMatrix.needsUpdate = true;\n  });\n\n  return (\n    <instancedMesh ref={meshRef} args={[null, null, numColumns * numRows]}>\n      <sphereGeometry args={[sphereRadius, 8, 8]} />\n      <meshStandardMaterial color=\"#00bfff\" />\n    </instancedMesh>\n  );\n};\n\nexport default Spheres;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}