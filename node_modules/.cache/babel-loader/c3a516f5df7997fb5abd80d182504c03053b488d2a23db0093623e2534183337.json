{"ast":null,"code":"var _jsxFileName = \"/Users/nathanmorelli/Desktop/MorelliPersonal2024 /src/ThreeDeeFiles/Box.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useMemo } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Spheres = () => {\n  _s();\n  const numSpheres = 1000000; // 100 x 10,000 = 1 million spheres\n  const columns = 100;\n  const rows = 10000;\n  const sphereRadius = 0.1; // Make the spheres very small\n  const meshRef = useRef();\n\n  // Memoize positions for instanced mesh\n  const positions = useMemo(() => {\n    const posArray = [];\n    for (let i = 0; i < numSpheres; i++) {\n      const x = i % columns * 0.2 - columns / 2 * 0.2; // Adjust spacing to fit the grid\n      const y = 0; // Fixed Y position for XZ grid\n      const z = Math.floor(i / columns) * 0.2 - rows / 2 * 0.2;\n      posArray.push([x, y, z]);\n    }\n    return posArray;\n  }, [numSpheres, columns, rows]);\n\n  // Animation loop\n  useFrame(({\n    clock\n  }) => {\n    const time = clock.getElapsedTime();\n    const waveSpeed = 0.5; // Speed of the wave\n    const waveFrequency = 0.1; // Frequency of the wave\n\n    for (let i = 0; i < numSpheres; i++) {\n      const id = i;\n      const dummy = new THREE.Object3D();\n      const [x, y, z] = positions[i];\n\n      // Create a smooth wave effect moving towards the user\n      const waveOffset = z * waveFrequency;\n      const waveHeight = Math.sin(time * waveSpeed + waveOffset) * 0.5;\n      dummy.position.set(x, waveHeight, z);\n      dummy.updateMatrix();\n\n      // Update instance matrix\n      meshRef.current.setMatrixAt(id, dummy.matrix);\n    }\n    meshRef.current.instanceMatrix.needsUpdate = true;\n  });\n  return /*#__PURE__*/_jsxDEV(\"instancedMesh\", {\n    ref: meshRef,\n    args: [null, null, numSpheres],\n    children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n      args: [sphereRadius, 8, 8]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshPhongMaterial\", {\n      color: \"hotpink\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(Spheres, \"MWnRDFRyj6jDunZkFrfEqXDdPO0=\", false, function () {\n  return [useFrame];\n});\n_c = Spheres;\nexport default Spheres;\nvar _c;\n$RefreshReg$(_c, \"Spheres\");","map":{"version":3,"names":["React","useRef","useMemo","Canvas","useFrame","THREE","jsxDEV","_jsxDEV","Spheres","_s","numSpheres","columns","rows","sphereRadius","meshRef","positions","posArray","i","x","y","z","Math","floor","push","clock","time","getElapsedTime","waveSpeed","waveFrequency","id","dummy","Object3D","waveOffset","waveHeight","sin","position","set","updateMatrix","current","setMatrixAt","matrix","instanceMatrix","needsUpdate","ref","args","children","fileName","_jsxFileName","lineNumber","columnNumber","color","_c","$RefreshReg$"],"sources":["/Users/nathanmorelli/Desktop/MorelliPersonal2024 /src/ThreeDeeFiles/Box.js"],"sourcesContent":["import React, { useRef, useMemo } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\n\nconst Spheres = () => {\n  const numSpheres = 1000000; // 100 x 10,000 = 1 million spheres\n  const columns = 100;\n  const rows = 10000;\n  const sphereRadius = 0.1; // Make the spheres very small\n  const meshRef = useRef();\n\n  // Memoize positions for instanced mesh\n  const positions = useMemo(() => {\n    const posArray = [];\n    for (let i = 0; i < numSpheres; i++) {\n      const x = (i % columns) * 0.2 - (columns / 2) * 0.2; // Adjust spacing to fit the grid\n      const y = 0; // Fixed Y position for XZ grid\n      const z = Math.floor(i / columns) * 0.2 - (rows / 2) * 0.2;\n      posArray.push([x, y, z]);\n    }\n    return posArray;\n  }, [numSpheres, columns, rows]);\n\n  // Animation loop\n  useFrame(({ clock }) => {\n    const time = clock.getElapsedTime();\n    const waveSpeed = 0.5; // Speed of the wave\n    const waveFrequency = 0.1; // Frequency of the wave\n\n    for (let i = 0; i < numSpheres; i++) {\n      const id = i;\n      const dummy = new THREE.Object3D();\n      const [x, y, z] = positions[i];\n\n      // Create a smooth wave effect moving towards the user\n      const waveOffset = z * waveFrequency;\n      const waveHeight = Math.sin(time * waveSpeed + waveOffset) * 0.5;\n\n      dummy.position.set(x, waveHeight, z);\n      dummy.updateMatrix();\n\n      // Update instance matrix\n      meshRef.current.setMatrixAt(id, dummy.matrix);\n    }\n    meshRef.current.instanceMatrix.needsUpdate = true;\n  });\n\n  return (\n    <instancedMesh ref={meshRef} args={[null, null, numSpheres]}>\n      <sphereGeometry args={[sphereRadius, 8, 8]} />\n      <meshPhongMaterial color=\"hotpink\" />\n    </instancedMesh>\n  );\n};\n\n  export default Spheres;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}