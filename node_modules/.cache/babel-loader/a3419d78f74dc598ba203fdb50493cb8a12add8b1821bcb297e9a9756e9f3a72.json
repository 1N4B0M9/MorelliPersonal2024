{"ast":null,"code":"var _jsxFileName = \"/Users/nathanmorelli/Desktop/MorelliPersonal2024 /src/ThreeDeeFiles/Box.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useMemo, useState } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Spheres = () => {\n  _s();\n  const numColumns = 80;\n  const numRows = 80;\n  const sphereRadius = 0.1;\n  const meshRef = useRef();\n  const [rainbow, setRainbow] = useState(false);\n\n  // Pre-compute sphere positions\n  const positions = useMemo(() => {\n    const posArray = [];\n    for (let i = 0; i < numColumns * numRows; i++) {\n      const x = i % numColumns * 0.6 - numColumns / 2 * 0.6;\n      const y = 0;\n      const z = Math.floor(i / numColumns) * 0.6 - numRows / 2 * 0.6;\n      posArray.push([x, y, z]);\n    }\n    return posArray;\n  }, [numColumns, numRows]);\n\n  // Initialize spheres with position and color\n  React.useEffect(() => {\n    const dummy = new THREE.Object3D();\n    const color = new THREE.Color();\n    for (let i = 0; i < numColumns * numRows; i++) {\n      const [x, y, z] = positions[i];\n      dummy.position.set(x, y, z);\n      dummy.updateMatrix();\n      meshRef.current.setMatrixAt(i, dummy.matrix);\n      color.set('#ffffff'); // Start with white color\n      meshRef.current.setColorAt(i, color);\n    }\n    meshRef.current.instanceMatrix.needsUpdate = true;\n    meshRef.current.instanceColor.needsUpdate = true;\n  }, [positions]);\n\n  // Animation loop for wave and fade effect\n  useFrame(({\n    clock,\n    camera\n  }) => {\n    const time = clock.getElapsedTime();\n    const waveSpeed = 1.5;\n    const waveFrequency = 0.3;\n    const waveHeight = 1.2; // Increased wave height\n    const dummy = new THREE.Object3D();\n    const color = new THREE.Color();\n    for (let i = 0; i < numColumns * numRows; i++) {\n      const [x, y, z] = positions[i];\n      const waveOffset = z * waveFrequency + x * waveFrequency;\n      const yPosition = Math.sin(time * waveSpeed + waveOffset) * waveHeight;\n      dummy.position.set(x, yPosition, z);\n\n      // More intense fade effect\n      const distance = dummy.position.distanceTo(camera.position);\n      const fadeFactor = Math.max(0, 1 - distance / 20); // Stronger fade effect\n\n      dummy.scale.set(fadeFactor, fadeFactor, fadeFactor);\n      dummy.updateMatrix();\n      meshRef.current.setMatrixAt(i, dummy.matrix);\n\n      // Color transition from white to dark gray based on fade factor\n      color.lerpColors(new THREE.Color('#ffffff'), new THREE.Color('#333333'), 1 - fadeFactor);\n      meshRef.current.setColorAt(i, color);\n    }\n    meshRef.current.instanceMatrix.needsUpdate = true;\n    meshRef.current.instanceColor.needsUpdate = true;\n  });\n  return /*#__PURE__*/_jsxDEV(\"instancedMesh\", {\n    ref: meshRef,\n    args: [null, null, numColumns * numRows],\n    children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n      args: [sphereRadius, 16, 16]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshPhysicalMaterial\", {\n      vertexColors: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(Spheres, \"cnPBCRIoQwSm2xgxvZf2ZTelDxg=\", false, function () {\n  return [useFrame];\n});\n_c = Spheres;\nexport default Spheres;\nvar _c;\n$RefreshReg$(_c, \"Spheres\");","map":{"version":3,"names":["React","useRef","useMemo","useState","useFrame","THREE","jsxDEV","_jsxDEV","Spheres","_s","numColumns","numRows","sphereRadius","meshRef","rainbow","setRainbow","positions","posArray","i","x","y","z","Math","floor","push","useEffect","dummy","Object3D","color","Color","position","set","updateMatrix","current","setMatrixAt","matrix","setColorAt","instanceMatrix","needsUpdate","instanceColor","clock","camera","time","getElapsedTime","waveSpeed","waveFrequency","waveHeight","waveOffset","yPosition","sin","distance","distanceTo","fadeFactor","max","scale","lerpColors","ref","args","children","fileName","_jsxFileName","lineNumber","columnNumber","vertexColors","_c","$RefreshReg$"],"sources":["/Users/nathanmorelli/Desktop/MorelliPersonal2024 /src/ThreeDeeFiles/Box.js"],"sourcesContent":["import React, { useRef, useMemo, useState } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\n\nconst Spheres = () => {\n  const numColumns = 80;\n  const numRows = 80;\n  const sphereRadius = 0.1;\n  const meshRef = useRef();\n  const [rainbow, setRainbow] = useState(false);\n\n\n  // Pre-compute sphere positions\n  const positions = useMemo(() => {\n    const posArray = [];\n    for (let i = 0; i < numColumns * numRows; i++) {\n      const x = (i % numColumns) * 0.6 - (numColumns / 2) * 0.6;\n      const y = 0;\n      const z = Math.floor(i / numColumns) * 0.6 - (numRows / 2) * 0.6;\n      posArray.push([x, y, z]);\n    }\n    return posArray;\n  }, [numColumns, numRows]);\n\n  // Initialize spheres with position and color\n  React.useEffect(() => {\n    const dummy = new THREE.Object3D();\n    const color = new THREE.Color();\n    for (let i = 0; i < numColumns * numRows; i++) {\n      const [x, y, z] = positions[i];\n      dummy.position.set(x, y, z);\n      dummy.updateMatrix();\n      meshRef.current.setMatrixAt(i, dummy.matrix);\n\n      color.set('#ffffff'); // Start with white color\n      meshRef.current.setColorAt(i, color);\n    }\n    meshRef.current.instanceMatrix.needsUpdate = true;\n    meshRef.current.instanceColor.needsUpdate = true;\n  }, [positions]);\n\n  // Animation loop for wave and fade effect\n  useFrame(({ clock, camera }) => {\n    const time = clock.getElapsedTime();\n    const waveSpeed = 1.5;\n    const waveFrequency = 0.3;\n    const waveHeight = 1.2; // Increased wave height\n    const dummy = new THREE.Object3D();\n    const color = new THREE.Color();\n\n    for (let i = 0; i < numColumns * numRows; i++) {\n      const [x, y, z] = positions[i];\n      const waveOffset = z * waveFrequency + x * waveFrequency;\n      const yPosition = Math.sin(time * waveSpeed + waveOffset) * waveHeight;\n\n      dummy.position.set(x, yPosition, z);\n\n      // More intense fade effect\n      const distance = dummy.position.distanceTo(camera.position);\n      const fadeFactor = Math.max(0, 1 - (distance / 20)); // Stronger fade effect\n\n      dummy.scale.set(fadeFactor, fadeFactor, fadeFactor);\n      dummy.updateMatrix();\n      meshRef.current.setMatrixAt(i, dummy.matrix);\n\n      // Color transition from white to dark gray based on fade factor\n      color.lerpColors(new THREE.Color('#ffffff'), new THREE.Color('#333333'), 1 - fadeFactor);\n      meshRef.current.setColorAt(i, color);\n    }\n\n    meshRef.current.instanceMatrix.needsUpdate = true;\n    meshRef.current.instanceColor.needsUpdate = true;\n  });\n\n  return (\n    <instancedMesh ref={meshRef} args={[null, null, numColumns * numRows]}>\n      <sphereGeometry args={[sphereRadius, 16, 16]} />\n      <meshPhysicalMaterial vertexColors />\n    </instancedMesh>\n  );\n};\n\nexport default Spheres;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}