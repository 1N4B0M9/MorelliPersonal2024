{"ast":null,"code":"import React,{useRef,useMemo,useState}from'react';import{useFrame}from'@react-three/fiber';import*as THREE from'three';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Spheres=()=>{const numColumns=80;const numRows=80;const sphereRadius=0.1;const meshRef=useRef();const[rainbow,setRainbow]=useState(false);// Pre-compute sphere positions\nconst positions=useMemo(()=>{const posArray=[];for(let i=0;i<numColumns*numRows;i++){const x=i%numColumns*0.6-numColumns/2*0.6;const y=0;const z=Math.floor(i/numColumns)*0.6-numRows/2*0.6;posArray.push([x,y,z]);}return posArray;},[numColumns,numRows]);// Initialize spheres with position and color\nReact.useEffect(()=>{const dummy=new THREE.Object3D();const color=new THREE.Color();for(let i=0;i<numColumns*numRows;i++){const[x,y,z]=positions[i];dummy.position.set(x,y,z);dummy.updateMatrix();meshRef.current.setMatrixAt(i,dummy.matrix);color.set('#ffffff');// Start with white color\nmeshRef.current.setColorAt(i,color);}meshRef.current.instanceMatrix.needsUpdate=true;meshRef.current.instanceColor.needsUpdate=true;},[positions]);// Animation loop for wave and fade effect\nuseFrame(_ref=>{let{clock,camera}=_ref;const time=clock.getElapsedTime();const waveSpeed=1.5;const waveFrequency=0.3;const waveHeight=1.2;// Increased wave height\nconst dummy=new THREE.Object3D();const color=new THREE.Color();for(let i=0;i<numColumns*numRows;i++){const[x,y,z]=positions[i];const waveOffset=z*waveFrequency+x*waveFrequency;const yPosition=Math.sin(time*waveSpeed+waveOffset)*waveHeight;dummy.position.set(x,yPosition,z);// More intense fade effect\nconst distance=dummy.position.distanceTo(camera.position);const fadeFactor=Math.max(0,1-distance/20);// Stronger fade effect\ndummy.scale.set(fadeFactor,fadeFactor,fadeFactor);dummy.updateMatrix();meshRef.current.setMatrixAt(i,dummy.matrix);// Color transition from white to dark gray based on fade factor\ncolor.lerpColors(new THREE.Color('#ffffff'),new THREE.Color('#333333'),1-fadeFactor);meshRef.current.setColorAt(i,color);}meshRef.current.instanceMatrix.needsUpdate=true;meshRef.current.instanceColor.needsUpdate=true;});return/*#__PURE__*/_jsxs(\"instancedMesh\",{ref:meshRef,args:[null,null,numColumns*numRows],children:[/*#__PURE__*/_jsx(\"sphereGeometry\",{args:[sphereRadius,16,16]}),/*#__PURE__*/_jsx(\"meshPhysicalMaterial\",{vertexColors:true})]});};export default Spheres;","map":{"version":3,"names":["React","useRef","useMemo","useState","useFrame","THREE","jsx","_jsx","jsxs","_jsxs","Spheres","numColumns","numRows","sphereRadius","meshRef","rainbow","setRainbow","positions","posArray","i","x","y","z","Math","floor","push","useEffect","dummy","Object3D","color","Color","position","set","updateMatrix","current","setMatrixAt","matrix","setColorAt","instanceMatrix","needsUpdate","instanceColor","_ref","clock","camera","time","getElapsedTime","waveSpeed","waveFrequency","waveHeight","waveOffset","yPosition","sin","distance","distanceTo","fadeFactor","max","scale","lerpColors","ref","args","children","vertexColors"],"sources":["/Users/nathanmorelli/Desktop/MorelliPersonal2024 /src/ThreeDeeFiles/Box.js"],"sourcesContent":["import React, { useRef, useMemo, useState } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\n\nconst Spheres = () => {\n  const numColumns = 80;\n  const numRows = 80;\n  const sphereRadius = 0.1;\n  const meshRef = useRef();\n  const [rainbow, setRainbow] = useState(false);\n\n\n  // Pre-compute sphere positions\n  const positions = useMemo(() => {\n    const posArray = [];\n    for (let i = 0; i < numColumns * numRows; i++) {\n      const x = (i % numColumns) * 0.6 - (numColumns / 2) * 0.6;\n      const y = 0;\n      const z = Math.floor(i / numColumns) * 0.6 - (numRows / 2) * 0.6;\n      posArray.push([x, y, z]);\n    }\n    return posArray;\n  }, [numColumns, numRows]);\n\n  // Initialize spheres with position and color\n  React.useEffect(() => {\n    const dummy = new THREE.Object3D();\n    const color = new THREE.Color();\n    for (let i = 0; i < numColumns * numRows; i++) {\n      const [x, y, z] = positions[i];\n      dummy.position.set(x, y, z);\n      dummy.updateMatrix();\n      meshRef.current.setMatrixAt(i, dummy.matrix);\n\n      color.set('#ffffff'); // Start with white color\n      meshRef.current.setColorAt(i, color);\n    }\n    meshRef.current.instanceMatrix.needsUpdate = true;\n    meshRef.current.instanceColor.needsUpdate = true;\n  }, [positions]);\n\n  // Animation loop for wave and fade effect\n  useFrame(({ clock, camera }) => {\n    const time = clock.getElapsedTime();\n    const waveSpeed = 1.5;\n    const waveFrequency = 0.3;\n    const waveHeight = 1.2; // Increased wave height\n    const dummy = new THREE.Object3D();\n    const color = new THREE.Color();\n\n    for (let i = 0; i < numColumns * numRows; i++) {\n      const [x, y, z] = positions[i];\n      const waveOffset = z * waveFrequency + x * waveFrequency;\n      const yPosition = Math.sin(time * waveSpeed + waveOffset) * waveHeight;\n\n      dummy.position.set(x, yPosition, z);\n\n      // More intense fade effect\n      const distance = dummy.position.distanceTo(camera.position);\n      const fadeFactor = Math.max(0, 1 - (distance / 20)); // Stronger fade effect\n\n      dummy.scale.set(fadeFactor, fadeFactor, fadeFactor);\n      dummy.updateMatrix();\n      meshRef.current.setMatrixAt(i, dummy.matrix);\n\n      // Color transition from white to dark gray based on fade factor\n      color.lerpColors(new THREE.Color('#ffffff'), new THREE.Color('#333333'), 1 - fadeFactor);\n      meshRef.current.setColorAt(i, color);\n    }\n\n    meshRef.current.instanceMatrix.needsUpdate = true;\n    meshRef.current.instanceColor.needsUpdate = true;\n  });\n\n  return (\n    <instancedMesh ref={meshRef} args={[null, null, numColumns * numRows]}>\n      <sphereGeometry args={[sphereRadius, 16, 16]} />\n      <meshPhysicalMaterial vertexColors />\n    </instancedMesh>\n  );\n};\n\nexport default Spheres;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}