{"ast":null,"code":"var _jsxFileName = \"/Users/nathanmorelli/Desktop/MorelliPersonal2024 /src/ThreeDeeFiles/Box.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useMemo, useState } from 'react';\nimport { useFrame, useThree } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Spheres = () => {\n  _s();\n  const numColumns = 80;\n  const numRows = 80;\n  const sphereRadius = 0.1;\n  const meshRef = useRef();\n  const raycaster = useRef(new THREE.Raycaster());\n  const [hoveredIndex, setHoveredIndex] = useState(null);\n  const {\n    camera,\n    mouse\n  } = useThree();\n\n  // Memoize positions for instanced mesh\n  const positions = useMemo(() => {\n    const posArray = [];\n    for (let i = 0; i < numColumns * numRows; i++) {\n      const x = i % numColumns * 0.6 - numColumns / 2 * 0.6;\n      const y = 0;\n      const z = Math.floor(i / numColumns) * 0.6 - numRows / 2 * 0.6;\n      posArray.push([x, y, z]);\n    }\n    return posArray;\n  }, [numColumns, numRows]);\n\n  // Initialize spheres with position and color\n  React.useEffect(() => {\n    const dummy = new THREE.Object3D();\n    const color = new THREE.Color();\n    for (let i = 0; i < numColumns * numRows; i++) {\n      const [x, y, z] = positions[i];\n      dummy.position.set(x, y, z);\n      dummy.updateMatrix();\n      meshRef.current.setMatrixAt(i, dummy.matrix);\n      color.set('#ffffff'); // Default white color\n      meshRef.current.setColorAt(i, color);\n    }\n    meshRef.current.instanceMatrix.needsUpdate = true;\n    meshRef.current.instanceColor.needsUpdate = true;\n  }, [positions]);\n\n  // Animation loop for wave and hover effect\n  useFrame(({\n    clock\n  }) => {\n    const time = clock.getElapsedTime();\n    const waveSpeed = 1.5;\n    const waveFrequency = 0.3;\n    const waveHeight = 1.2;\n    const dummy = new THREE.Object3D();\n    const color = new THREE.Color();\n\n    // Raycasting for hover detection\n    raycaster.current.setFromCamera(mouse, camera);\n    const intersects = raycaster.current.intersectObject(meshRef.current);\n    let newHoveredIndex = null;\n    if (intersects.length > 0) {\n      newHoveredIndex = intersects[0].instanceId;\n    }\n    for (let i = 0; i < numColumns * numRows; i++) {\n      const [x, y, z] = positions[i];\n      const waveOffset = z * waveFrequency + x * waveFrequency;\n      let yPosition = Math.sin(time * waveSpeed + waveOffset) * waveHeight;\n      if (i === newHoveredIndex) {\n        // Hover effect: raise the sphere and change color\n        yPosition += 0.5;\n        color.setHSL(time % 1, 1, 0.5); // Rainbow color effect\n      } else {\n        color.set('#ffffff'); // Default white color\n      }\n      dummy.position.set(x, yPosition, z);\n      dummy.updateMatrix();\n      meshRef.current.setMatrixAt(i, dummy.matrix);\n      meshRef.current.setColorAt(i, color);\n    }\n    setHoveredIndex(newHoveredIndex);\n    meshRef.current.instanceMatrix.needsUpdate = true;\n    meshRef.current.instanceColor.needsUpdate = true;\n  });\n  return /*#__PURE__*/_jsxDEV(\"instancedMesh\", {\n    ref: meshRef,\n    args: [null, null, numColumns * numRows],\n    children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n      args: [sphereRadius, 16, 16]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshPhysicalMaterial\", {\n      vertexColors: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(Spheres, \"I16RNnYyw7tbyuPVhFqsYCXSGNo=\", false, function () {\n  return [useThree, useFrame];\n});\n_c = Spheres;\nexport default Spheres;\nvar _c;\n$RefreshReg$(_c, \"Spheres\");","map":{"version":3,"names":["React","useRef","useMemo","useState","useFrame","useThree","THREE","jsxDEV","_jsxDEV","Spheres","_s","numColumns","numRows","sphereRadius","meshRef","raycaster","Raycaster","hoveredIndex","setHoveredIndex","camera","mouse","positions","posArray","i","x","y","z","Math","floor","push","useEffect","dummy","Object3D","color","Color","position","set","updateMatrix","current","setMatrixAt","matrix","setColorAt","instanceMatrix","needsUpdate","instanceColor","clock","time","getElapsedTime","waveSpeed","waveFrequency","waveHeight","setFromCamera","intersects","intersectObject","newHoveredIndex","length","instanceId","waveOffset","yPosition","sin","setHSL","ref","args","children","fileName","_jsxFileName","lineNumber","columnNumber","vertexColors","_c","$RefreshReg$"],"sources":["/Users/nathanmorelli/Desktop/MorelliPersonal2024 /src/ThreeDeeFiles/Box.js"],"sourcesContent":["import React, { useRef, useMemo, useState } from 'react';\nimport { useFrame, useThree } from '@react-three/fiber';\nimport * as THREE from 'three';\n\nconst Spheres = () => {\n  const numColumns = 80;\n  const numRows = 80;\n  const sphereRadius = 0.1;\n  const meshRef = useRef();\n  const raycaster = useRef(new THREE.Raycaster());\n  const [hoveredIndex, setHoveredIndex] = useState(null);\n\n  const { camera, mouse } = useThree();\n\n  // Memoize positions for instanced mesh\n  const positions = useMemo(() => {\n    const posArray = [];\n    for (let i = 0; i < numColumns * numRows; i++) {\n      const x = (i % numColumns) * 0.6 - (numColumns / 2) * 0.6;\n      const y = 0;\n      const z = Math.floor(i / numColumns) * 0.6 - (numRows / 2) * 0.6;\n      posArray.push([x, y, z]);\n    }\n    return posArray;\n  }, [numColumns, numRows]);\n\n  // Initialize spheres with position and color\n  React.useEffect(() => {\n    const dummy = new THREE.Object3D();\n    const color = new THREE.Color();\n    for (let i = 0; i < numColumns * numRows; i++) {\n      const [x, y, z] = positions[i];\n      dummy.position.set(x, y, z);\n      dummy.updateMatrix();\n      meshRef.current.setMatrixAt(i, dummy.matrix);\n\n      color.set('#ffffff'); // Default white color\n      meshRef.current.setColorAt(i, color);\n    }\n    meshRef.current.instanceMatrix.needsUpdate = true;\n    meshRef.current.instanceColor.needsUpdate = true;\n  }, [positions]);\n\n  // Animation loop for wave and hover effect\n  useFrame(({ clock }) => {\n    const time = clock.getElapsedTime();\n    const waveSpeed = 1.5;\n    const waveFrequency = 0.3;\n    const waveHeight = 1.2;\n    const dummy = new THREE.Object3D();\n    const color = new THREE.Color();\n\n    // Raycasting for hover detection\n    raycaster.current.setFromCamera(mouse, camera);\n    const intersects = raycaster.current.intersectObject(meshRef.current);\n\n    let newHoveredIndex = null;\n    if (intersects.length > 0) {\n      newHoveredIndex = intersects[0].instanceId;\n    }\n\n    for (let i = 0; i < numColumns * numRows; i++) {\n      const [x, y, z] = positions[i];\n      const waveOffset = z * waveFrequency + x * waveFrequency;\n      let yPosition = Math.sin(time * waveSpeed + waveOffset) * waveHeight;\n\n      if (i === newHoveredIndex) {\n        // Hover effect: raise the sphere and change color\n        yPosition += 0.5;\n        color.setHSL((time % 1), 1, 0.5); // Rainbow color effect\n      } else {\n        color.set('#ffffff'); // Default white color\n      }\n\n      dummy.position.set(x, yPosition, z);\n      dummy.updateMatrix();\n      meshRef.current.setMatrixAt(i, dummy.matrix);\n      meshRef.current.setColorAt(i, color);\n    }\n\n    setHoveredIndex(newHoveredIndex);\n    meshRef.current.instanceMatrix.needsUpdate = true;\n    meshRef.current.instanceColor.needsUpdate = true;\n  });\n\n  return (\n    <instancedMesh ref={meshRef} args={[null, null, numColumns * numRows]}>\n      <sphereGeometry args={[sphereRadius, 16, 16]} />\n      <meshPhysicalMaterial vertexColors />\n    </instancedMesh>\n  );\n};\n\nexport default Spheres;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}